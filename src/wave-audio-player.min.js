document.addEventListener("DOMContentLoaded",()=>{class t extends HTMLElement{constructor(){super(),this.shadowDOM=this.attachShadow({mode:"open"}),this.setupAfterConstructor()}setupAfterConstructor(){this.audioData=null,this.hasAttribute("wave-options")?(this.options=JSON.parse(this.attributes["wave-options"].value),this.options.width=parseInt(this.attributes["wave-width"].value),this.options.height=parseInt(this.attributes["wave-height"].value)):this.options={samples:40,type:"mirror",width:parseInt(this.attributes["wave-width"].value),height:parseInt(this.attributes["wave-height"].value),paths:[{d:"V",sy:0,x:50,ey:100}]},this.options.hasOwnProperty("animation")?this.animation=this.options.animation:this.animation=!1,this.playPath="M8.5 8.7c0-1.7 1.2-2.4 2.6-1.5l14.4 8.3c1.4.8 1.4 2.2 0 3l-14.4 8.3c-1.4.8-2.6.2-2.6-1.5V8.7z",this.pausePath="M9.2 25c0 .5.4 1 .9 1h3.6c.5 0 .9-.4.9-1V9c0-.5-.4-.9-.9-.9h-3.6c-.4-.1-.9.3-.9.9v16zm11-17c-.5 0-1 .4-1 .9V25c0 .5.4 1 1 1h3.6c.5 0 1-.4 1-1V9c0-.5-.4-.9-1-.9 0-.1-3.6-.1-3.6-.1z",this.playPathButton=null,this.svg=null,this.path1=null,this.path2=null,this.animationsvg=null,this.animationsvgx=null,this.audio=null,this.durationContainer=null,this.seekSlider=null,this.currentTimeContainer=null,this.playIconContainer=null,this.raf=null}static get observedAttributes(){return["id","class","src","wave-options","wave-width","wave-height",]}attributeChangedCallback(t,e,i){this.setupAfterConstructor(),this.connectedCallback()}initComponent(){this.playPathButton=this.shadowDOM.getElementById("playPathButton"),this.svg=this.shadowDOM.getElementById("svg"),this.path1=this.shadowDOM.getElementById("path1"),this.path2=this.shadowDOM.getElementById("path2"),this.animationsvg=this.shadowDOM.getElementById("animationsvg"),this.animationsvgx=this.shadowDOM.getElementById("animationsvgx"),this.audio=this.shadowDOM.querySelector("audio"),this.durationContainer=this.shadowDOM.getElementById("duration"),this.seekSlider=this.shadowDOM.getElementById("seek-slider"),this.currentTimeContainer=this.shadowDOM.getElementById("current-time"),this.playIconContainer=this.shadowDOM.getElementById("play"),this.svg.pauseAnimations(),this.seekSlider.addEventListener("input",this.sliderInput),this.seekSlider.addEventListener("change",this.sliderChange),this.playIconContainer.addEventListener("click",this.playPause),this.audio.readyState>0?this.loadSong():this.audio.addEventListener("loadedmetadata",t=>{this.loadSong(),this.hasAttribute("onLoadedmetadata")&&"function"==typeof window[this.getAttribute("onLoadedmetadata")]&&window[this.getAttribute("onLoadedmetadata")](t)}),this.audio.addEventListener("ended",t=>{this.onFinish(),this.hasAttribute("onEnded")&&"function"==typeof window[this.getAttribute("onEnded")]&&window[this.getAttribute("onEnded")](t)}),["onCanplay","onCanplaythrough","onDurationchange","onEmptied","onLoadeddata","onPause","onPlay","onPlaying","onRatechange","onSeeked","onSeeking","onStalled","onSuspend","onTimeupdate","onVolumechange","onWaiting","onError",].forEach(t=>{let e=t.split("on")[1].toLowerCase();this.audio.addEventListener(e,e=>{this.hasAttribute(t)&&"function"==typeof window[this.getAttribute(t)]&&window[this.getAttribute(t)](e)})})}togglePlay=()=>{this.playPause()};play=()=>{this.audio.play(),this.svg.unpauseAnimations(),this.path2.style.display="block",this.playPathButton.setAttribute("d",this.pausePath),this.raf=requestAnimationFrame(this.whilePlaying)};pause=()=>{this.audio.pause(),this.svg.pauseAnimations(),this.playPathButton.setAttribute("d",this.playPath),cancelAnimationFrame(this.raf)};load=()=>{this.audio.load()};loadSong=()=>{this.durationContainer.textContent=this.calculateTime(this.audio.duration),this.seekSlider.max=this.audio.duration,this.svg.unpauseAnimations(),this.animationsvg.setAttribute("dur",""+this.audio.duration+"s"),this.animation||this.animationsvgx.setAttribute("dur",""+this.audio.duration+"s"),this.svg.pauseAnimations(),this.svg.setCurrentTime(0)};playPause=()=>{this.audio.paused?this.play():this.pause()};sliderInput=()=>{this.path2.style.display="block",this.currentTimeContainer.textContent=this.calculateTime(this.seekSlider.value),this.svg.setCurrentTime(this.seekSlider.value),this.audio.paused||cancelAnimationFrame(this.raf)};sliderChange=()=>{this.audio.currentTime=this.seekSlider.value,this.path2.style.display="block",this.svg.setCurrentTime(this.seekSlider.value),this.audio.paused||(this.raf=requestAnimationFrame(this.whilePlaying))};onFinish=()=>{this.seekSlider.value=this.seekSlider.max,this.svg.setCurrentTime(this.audio.duration),this.svg.pauseAnimations(),this.playPathButton.setAttribute("d",this.playPath),cancelAnimationFrame(this.raf)};whilePlaying=()=>{this.seekSlider.value=this.audio.currentTime,this.currentTimeContainer.textContent=this.calculateTime(this.seekSlider.value),this.svg.setCurrentTime(this.seekSlider.value),this.raf=requestAnimationFrame(this.whilePlaying)};async audioPath(){this.audioData=await this.getAudioData(this.attributes.src.value),this.svgDraw()}svgDraw=()=>{let t=this.linearPath(this.audioData,this.options);this.animation?this.animationsvg.setAttribute("values",t):(this.path1.setAttribute("d",t),this.path2.setAttribute("d",t)),this.svg.setCurrentTime(this.seekSlider.value)};calculateTime=t=>{let e=Math.floor(t/60),i=Math.floor(t%60),a=i<10?`0${i}`:`${i}`;return`${e}:${a}`};mapComponentAttributes(){["src","wave-height","wave-width","color","wave-options","wave-color","wave-progress-color","wave-slider"].forEach(t=>{this.attributes[t]||(this.attributes[t]={value:null})})}connectedCallback(){this.mapComponentAttributes(),this.render(),this.initComponent(),this.audioPath()}render(){this.shadowDOM.innerHTML=`
                ${this.templateCss()}
                ${this.template()}
            `}template(){let t=`
            <div part="player" class="player">
                <button id="play" part="play">
                    <svg viewBox="0 0 34 34" width="34" height="34" part="button">
                        <path id="playPathButton" d="M8.5 8.7c0-1.7 1.2-2.4 2.6-1.5l14.4 8.3c1.4.8 1.4 2.2 0 3l-14.4 8.3c-1.4.8-2.6.2-2.6-1.5V8.7z"></path>
                        <!--<path fill="currentColor" d="M9.2 25c0 .5.4 1 .9 1h3.6c.5 0 .9-.4.9-1V9c0-.5-.4-.9-.9-.9h-3.6c-.4-.1-.9.3-.9.9v16zm11-17c-.5 0-1 .4-1 .9V25c0 .5.4 1 1 1h3.6c.5 0 1-.4 1-1V9c0-.5-.4-.9-1-.9 0-.1-3.6-.1-3.6-.1z"></path>-->
                    </svg>
                </button>
            <div id="current-time" part="currenttime">0:00</div>
            <div id="slider" part="slider">
                <svg id="svg" part="svg" xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 ${this.attributes["wave-width"].value} ${this.attributes["wave-height"].value}" width="${this.attributes["wave-width"].value}" height="${this.attributes["wave-height"].value}">
            `;return this.animation?t+=`
                <path id="path1" part="path1"  stroke-width="2" style="display:none;"></path>
                <path id="path2" part="path2"  stroke-width="2" style="display:block;">
                    <animate id="animationsvg" attributeName="d" dur="99999s" calcMode="linear" values="" fill="freeze"></animate>
                </path>
                `:t+=`
                <defs>
                    <clipPath id="left-to-right-x">
                    <rect x="-1" y="-100" width="${parseInt(this.attributes["wave-width"].value)+2}" height="${parseInt(this.attributes["wave-height"].value)+200}" >
                        <animate id="animationsvgx" attributeName="x" values="-1;${parseInt(this.attributes["wave-width"].value)+2}" dur="99999s" fill="freeze" />   
                    </rect>
                    </clipPath>
                    <clipPath id="left-to-right">
                    <rect x="-${parseInt(this.attributes["wave-width"].value)+2}" y="-100" width="${parseInt(this.attributes["wave-width"].value)+2}" height="${parseInt(this.attributes["wave-height"].value)+200}" >
                        <animate id="animationsvg" attributeName="x" values="-${parseInt(this.attributes["wave-width"].value)+2};-1" dur="99999s" fill="freeze" />   
                    </rect>
                    </clipPath>    
                </defs> 
                <path id="path1" part="path1"  stroke-width="2" d="" clip-path="url(#left-to-right-x)"></path>
                <path id="path2" part="path2"  stroke-width="2" d="" clip-path="url(#left-to-right)" style="display:none;"></path>`,t+=`
            </svg>
                    <input type="range" part="input" id="seek-slider" max="100" value="0" step="any">
                </div>
                <div id="duration" part="duration">0:00</div>
            </div>
            <audio src="${this.attributes.src.value}"></audio>
            `}templateCss(){return`
                <style>
                *, :after, :before { 
                    box-sizing: border-box;
                    margin: 0;
                }
                :host {
                    display: flex;
                
                }
                .player {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                #play {
                    background: transparent;
                    border: none;
                    cursor:pointer;
                    padding: 0 0 0 10px;
                    margin: 0px;
                    
                }
                #play svg {
                    fill: ${this.attributes.color?.value??"#858a8d"};
                    position:relative;
                    transition: transform 0.3s;
                    top: -0.5px;
                }
                #play svg:hover {
                    transform: scale(1.2);
                }
                #play svg path {
                    stroke-linecap: round;
                    stroke-linejoin: round;
                    transition: 0.2s;
                }
                #svg {
                    margin: 0 10px;
                    overflow: visible;
                    stroke-width: 1px;
                    fill: none;
                }
                #path1 {
                    stroke: ${this.attributes["wave-color"]?.value??"#dadcdd"}; 
                    overflow: visible;
                    stroke-linecap: round;
                }
                #path2 {
                    stroke: ${this.attributes["wave-progress-color"]?.value??"#858a8d"};
                    overflow: visible;
                    stroke-linecap: round;
                }
                #slider  {
                    position:relative;
                }
                #duration, #current-time {
                    position: relative;
                    top:-1.1px;
                    color: ${this.attributes.color?.value??"#858a8d"};
                    margin: 0px 10px;
                    font-size: 16px;
                    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
                    min-width:32px;
                }
                #seek-slider {
                    position: absolute;
                    width: 100%;
                    left: 0;
                }
                input[type=range] {
                    -webkit-appearance: none; 
                    width: 100%; 
                    background: transparent; 
                    padding: 0px;
                    margin: 0px;
                    border: 0px;
                    height: ${parseInt(this.attributes["wave-height"].value)}px;
                }  
                input[type=range]::-webkit-slider-thumb {
                    -webkit-appearance: none;
                }
                input[type=range]:focus {
                    outline: none; 
                }
                
                input[type=range]::-ms-track {
                    width: 100%;
                    cursor: pointer;
                    /* Hides the slider so custom styles can be added */
                    background: transparent; 
                    border-color: transparent;
                    color: transparent;
                }
                input[type=range]::-webkit-slider-thumb {
                    -webkit-appearance: none;
                    position:relative; 
                    /*top: -1.5px;*/
                    height: 12.5px;
                    width: 12.5px;
                    border-radius: 50%;
                    background:  ${this.attributes["wave-slider"]?.value??"#4fc3f7"};
                    cursor: pointer;
                    box-shadow: none;
                }
                input[type="range"]::-webkit-slider-thumb {
                    transition: transform 0.3s;
                }
                input[type="range"]:active::-webkit-slider-thumb {
                    transform: scale(1.5);
                }
                input[type="range"]::-moz-range-thumb {
                    height: 12.5px;
                    width: 12.5px;
                    border-radius: 50%;
                    background:  ${this.attributes["wave-slider"]?.value??"#4fc3f7"};
                    cursor: pointer;
                    box-shadow: none;
                    border: 0px;
                }

                input[type="range"]:active::-moz-range-thumb {
                    transform: scale(1.5);
                }  
                span {
                    color: red;
                }
                </style>
            `}getAudioData=t=>{window.AudioContext=window.AudioContext||window.webkitAudioContext;let e=new AudioContext;return fetch(t).then(t=>t.arrayBuffer()).then(t=>e.decodeAudioData(t)).catch(t=>{console.error(t)})};linearPath=(t,e)=>{let{channel:i=0,samples:a=t.length,height:s=100,width:r=800,top:n=0,left:h=0,type:o="steps",paths:l=[{d:"Q",sx:0,sy:0,x:50,y:100,ex:100,ey:0}],animation:d=!1,animationframes:u=10,normalize:$=!0}=e,p=this.getFramesData(t,i,d,u),_=this.getFilterData(p,a),c=$?this.getNormalizeData(_):_,g="",v="bars"!=o?(s+2*n)/2:s+n,m=r/a,b=l.length,w="mirror"==o?2*b:b,y=c.length;for(let f=0;f<y;f++){if(f>0){let x=g.length,k=g.charAt(x-1);";"==k||0===x?g+=" M 0 0 ;":g+=";"}let C=-9999,A=-9999;for(let P=0;P<a;P++){let D="bars"!=o?P%2?1:-1:1,M=1;for(let E=0;E<w;E++){let S=E;E>=b&&(S=E-b,M=-1),l[S].minshow=l[S].minshow??0,l[S].maxshow=l[S].maxshow??1,l[S].normalize=l[S].normalize??!1;let z=l[S].normalize?1:c[f][P];if(l[S].minshow<=c[f][P]&&l[S].maxshow>=c[f][P])switch(l[S].d){case"L":{let B=P*m+m*l[S].sx/100+h,L=v+-(z*l[S].sy/100*("bars"!=o?s/2:s)*D)*M,T=P*m+m*l[S].ex/100+h,I=v+-(z*l[S].ey/100*("bars"!=o?s/2:s)*D)*M;(B!==C||L!==A)&&(g+=`M ${B} ${L} `),g+=`L ${T} ${I} `,C=T,A=I;break}case"H":{let O=P*m+m*l[S].sx/100+h,V=v+-(z*l[S].y/100*("bars"!=o?s/2:s)*D)*M,F=P*m+m*l[S].ex/100+h,N=V;(O!==C||V!==A)&&(g+=`M ${O} ${V} `),g+=`H ${F} `,C=F,A=N;break}case"V":{let H=P*m+m*l[S].x/100+h,Q=v+-(z*l[S].sy/100*("bars"!=o?s/2:s)*D)*M,Z=H,j=v+-(z*l[S].ey/100*("bars"!=o?s/2:s)*D)*M;(H!==C||Q!==A)&&(g+=`M ${H} ${Q} `),g+=`V ${j} `,C=Z,A=j;break}case"C":{let R=P*m+m*l[S].sx/100+h,q=v-v*l[S].sy/100*D,W=P*m+m*l[S].x/100+h,G=v+-(z*l[S].y/100*("bars"!=o?s:2*s)*D)*M,J=P*m+m*l[S].ex/100+h,K=v-v*l[S].ey/100*D;(R!==C||q!==A)&&(g+=`M ${R} ${q} `),g+=`C ${R} ${q} ${W} ${G} ${J} ${K} `,C=J,A=K;break}case"Q":{let U=P*m+m*l[S].sx/100+h,X=v+-(z*l[S].sy/100*("bars"!=o?s/2:s)*D)*M,Y=P*m+m*l[S].x/100+h,tt=v+-(z*l[S].y/100*("bars"!=o?s:2*s)*D)*M,te=P*m+m*l[S].ex/100+h,ti=v+-(z*l[S].ey/100*("bars"!=o?s/2:s)*D)*M;(U!==C||X!==A)&&(g+=`M ${U} ${X} `),g+=`Q ${Y} ${tt} ${te} ${ti} `,C=te,A=ti;break}case"A":{let ta=P*m+m*l[S].sx/100+h,ts=v+-(z*l[S].sy/100*("bars"!=o?s/2:s)*D)*M,tr=P*m+m*l[S].ex/100+h,tn=v+-(z*l[S].ey/100*("bars"!=o?s/2:s)*D)*M;(ta!==C||ts!==A)&&(g+=`M ${ta} ${ts} `);let th=l[S].rx*m/100,to=l[S].ry*m/100,tl=l[S].sweep;-1==D&&(tl=1==tl?0:1),-1==M&&(tl=1==tl?0:1),g+=`A ${th} ${to} ${l[S].angle} ${l[S].arc} ${tl} ${tr} ${tn} `,C=tr,A=tn;break}case"Z":g+="Z "}}}}return g};polarPath=(t,e)=>{let{channel:i=0,samples:a=t.length,distance:s=50,length:r=100,top:n=0,left:h=0,type:o="steps",startdeg:l=0,enddeg:d=360,invertdeg:u=!1,invertpath:$=!1,paths:p=[{d:"Q",sdeg:0,sr:0,deg:50,r:100,edeg:100,er:0}],animation:_=!1,animationframes:c=10,normalize:g=!0}=e,v=this.getFramesData(t,i,_,c),m=this.getFilterData(v,a),b=g?this.getNormalizeData(m):m,w="",y=d<l?d+360:d,f=u?(l-y)/a:(y-l)/a,x=u?90+l+180:90+l,k=$?-1:1,C=p.length,A="mirror"==o?2*C:C,P=Math.PI/180,D=b.length;for(let M=0;M<D;M++){if(M>0){let E=w.length,S=w.charAt(E-1);";"==S||0===E?w+=" M 0 0 ;":w+=";"}let z=-9999,B=-9999;for(let L=0;L<a;L++){let T="bars"!=o?L%2?1:-1:1,I=1;for(let O=0;O<A;O++){let V=O;O>=C&&(V=O-C,I=-1),p[V].minshow=p[V].minshow??0,p[V].maxshow=p[V].maxshow??1,p[V].normalize=p[V].normalize??!1;let F=p[V].normalize?1:b[M][L];if(p[V].minshow<=b[M][L]&&p[V].maxshow>=b[M][L])switch(p[V].d){case"L":{let N=(f*(L+p[V].sdeg/100)-x)*P,H=(f*(L+p[V].edeg/100)-x)*P,Q=h+(r*(p[V].sr/100)*F*T*I*k+s)*Math.cos(N),Z=n+(r*(p[V].sr/100)*F*T*I*k+s)*Math.sin(N),j=h+(r*(p[V].er/100)*F*T*I*k+s)*Math.cos(H),R=n+(r*(p[V].er/100)*F*T*I*k+s)*Math.sin(H);(Q!==z||Z!==B)&&(w+=`M ${Q} ${Z} `),w+=`L ${j} ${R} `,z=j,B=R;break}case"C":{let q=(f*(L+p[V].sdeg/100)-x)*P,W=(f*(L+p[V].deg/100)-x)*P,G=(f*(L+p[V].edeg/100)-x)*P,J=h+(r*(p[V].sr/100)*F*T*I*k+s)*Math.cos(q),K=n+(r*(p[V].sr/100)*F*T*I*k+s)*Math.sin(q),U=h+(r*(p[V].r/100)*F*T*I*k+s)*Math.cos(W),X=n+(r*(p[V].r/100)*F*T*I*k+s)*Math.sin(W),Y=h+(r*(p[V].er/100)*F*T*I*k+s)*Math.cos(G),tt=n+(r*(p[V].er/100)*F*T*I*k+s)*Math.sin(G);(J!==z||K!==B)&&(w+=`M ${J} ${K} `),w+=`C ${J} ${K} ${U} ${X} ${Y} ${tt} `,z=Y,B=tt;break}case"Q":{let te=(f*(L+p[V].sdeg/100)-x)*P,ti=(f*(L+p[V].deg/100)-x)*P,ta=(f*(L+p[V].edeg/100)-x)*P,ts=h+(r*(p[V].sr/100)*F*T*I*k+s)*Math.cos(te),tr=n+(r*(p[V].sr/100)*F*T*I*k+s)*Math.sin(te),tn=h+(r*(p[V].r/100)*F*T*I*k+s)*Math.cos(ti),th=n+(r*(p[V].r/100)*F*T*I*k+s)*Math.sin(ti),to=h+(r*(p[V].er/100)*F*T*I*k+s)*Math.cos(ta),tl=n+(r*(p[V].er/100)*F*T*I*k+s)*Math.sin(ta);(ts!==z||tr!==B)&&(w+=`M ${ts} ${tr} `),w+=`Q ${tn} ${th} ${to} ${tl} `,z=to,B=tl;break}case"A":{let td=(f*(L+p[V].sdeg/100)-x)*P,tu=(f*(L+p[V].edeg/100)-x)*P,t$=h+(r*(p[V].sr/100)*F*T*I*k+s)*Math.cos(td),tp=n+(r*(p[V].sr/100)*F*T*I*k+s)*Math.sin(td),t_=h+(r*(p[V].er/100)*F*T*I*k+s)*Math.cos(tu),tc=n+(r*(p[V].er/100)*F*T*I*k+s)*Math.sin(tu);(t$!==z||tp!==B)&&(w+=`M ${t$} ${tp} `);let tg=f*L*p[V].angle/100,tv=p[V].rx*f/100,tm=p[V].ry*f/100,tb=p[V].sweep;-1==T&&(tb=1==tb?0:1),-1==I&&(tb=1==tb?0:1),w+=`A ${tv} ${tm} ${tg} ${p[V].arc} ${tb} ${t_} ${tc} `,z=t_,B=tc;break}case"Z":w+="Z "}}}}return w};getFramesData=(t,e,i,a)=>{let s=t.getChannelData(e),r=[];if(i){let n=t.sampleRate/a;for(let h=0;h<s.length;h+=n){let o=s.slice(h,h+n);r.push(o)}}else r.push(s);return r};getFilterData=(t,e)=>{let i=[],a=t.length;for(let s=0;s<a;s++){let r=Math.floor(t[s].length/e),n=[];for(let h=0;h<e;h++){let o=r*h,l=0;for(let d=0;d<r;d++)l+=Math.abs(t[s][o+d]);n.push(l/r)}i.push(n)}return i};getNormalizeData=t=>{let e=[],i=t.length;for(let a=0;a<i;a++){let s=Math.max(...t[a]);e.push(s)}let r=Math.pow(Math.max(...e),-1),n=[];for(let h=0;h<i;h++){let o=t[h].map(t=>t*r);n.push(o)}return n}}window.customElements.define("wave-audio-player",t)});